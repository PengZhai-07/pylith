[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [example, 3D, strike slip, Ridgecrest]
features = [
    Tetrahedral cells,
    pylith.problems.TimeDependent,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicLinearElasticity,
    pylith.faults.FaultCohesiveKin,
    pylith.faults.KinSrcStep,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.UniformDB,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiopetsc = 1
faultcohesivekin = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOPetsc
reader.filename = mesh_tet.msh

# Model coordinate system is UTM zone 11
reader.coordsys = spatialdata.geocoords.CSGeo
reader.coordsys.crs_string = EPSG:32611
reader.coordsys.space_dim = 3

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem]
# Output the solution over the domain and on the +z (groundsurf).
solution_observers = [domain, groundsurf]
solution_observers.groundsurf = pylith.meshio.OutputSolnBoundary

# `label` and `label_value` correspond to the name and tag of the 
# physical groups marking the boundaries in the Gmsh script.
[pylithapp.problem.solution_observers.groundsurf]
label = boundary_top
label_value = 15


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Create an array of 1 material, matching the number of physical groups
# of materials we created in the Gmsh script.
[pylithapp.problem]
materials = [elastic]

[pylithapp.problem.materials.elastic]
# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).
#
# `label_value` must match the tag for the physical group in the Gmsh Python script.
label_value = 1

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties xneg
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 1
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
# Set the interfaces array to an array of the 3 faults in the mesh.
[pylithapp.problem]
interfaces = [main_fault, west_branch, east_branch]

## main fault
[pylithapp.problem.interfaces.main_fault]
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
label = fault_main
label_value = 20

edge = fault_main_edges
edge_value = 30

# Output `slip` and `traction_changes` on the fault.
observers.observer.data_fields = [slip, traction_change]


[pylithapp.problem.interfaces.west_branch]
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
label =  fault_west
label_value = 21

edge = fault_west_edges
edge_value = 31

# Output `slip` and `traction_changes` on the fault.
observers.observer.data_fields = [slip, traction_change]


[pylithapp.problem.interfaces.east_branch]
# The `label` and `label_value` correspond to the name and tag of the
## physical group in the Gmsh Python script.
label = fault_east
label_value = 22

edge = fault_east_edges
edge_value = 32

# Output `slip` and `traction_changes` on the fault.
observers.observer.data_fields = [slip, traction_change]


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Create an array of 2 boundary conditions for the +x and -x boundaries.
[pylithapp.problem]
bc = [bc_south, bc_east, bc_north, bc_west, bc_bottom]
bc.bc_south = pylith.bc.DirichletTimeDependent
bc.bc_east = pylith.bc.DirichletTimeDependent
bc.bc_north = pylith.bc.DirichletTimeDependent
bc.bc_south = pylith.bc.DirichletTimeDependent
bc.bc_bottom = pylith.bc.DirichletTimeDependent

# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
#
# We constrain the displacement component normal to each boundary.
# We use the specialized `ZeroDB` to specify zero values for the Dirichlet
# BC. We will override this parameter in some of the .cfg files to specify
# nonzero values.
[pylithapp.problem.bc.bc_south]
label = boundary_south
label_value = 10
constrained_dof = [1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on south boundary

[pylithapp.problem.bc.bc_east]
label = boundary_east
label_value = 11
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on east boundary

[pylithapp.problem.bc.bc_north]
label = boundary_north
label_value = 12
constrained_dof = [1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on north boundary

[pylithapp.problem.bc.bc_west]
label = boundary_west
label_value = 13
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on west boundary

[pylithapp.problem.bc.bc_bottom]
label = boundary_bottom
label_value = 14
constrained_dof = [2]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on bottom boundary


# End of file