[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x
#
#
#             -----------
#             |    |    |
# Ux, Uy= 0   |    |    | Ux, Uy= 0
#             |    |    |
#             |    |    |
#             -----------
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux = Uy = 0
# boundary_xpos: Ux = Uy = 0
#
# Fault has spatially variable slip from -20 km <= y <= +20 km. This simulation
# generates fake GNSS observations used the slip inversion in Step 5.
base = [pylithapp.cfg]
description = Coseismic prescribed slip with zero displacement Dirichlet boundary conditions.
authors = [Brad Aagaard]
keywords = [prescribed slip, basis order 2]
arguments = [step04_varslip.cfg]
version = 1.0.0
pylith_version = [>=4.0, <6.0]

features = [
    Static simulation
    ]


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
defaults.name = step04_varslip

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
refiner = pylith.topology.RefineUniform

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
# Update the parameters to use a basis order of 2 for the solution fields.
#
# The accuracy of the stress and strain will be 1 order lower than the basis
# order of the displacement field. Consequently, we use a basis order of 1
# (rather than 0) for the output of the Cauchy stress and strain.
#
# We do not change the basis order of the output of the displacement field,
# because many visualization tools do not know how to display fields with
# a basis order of 2.

[pylithapp.problem]
# Set the default quadrature order for all subfields. We want to set it
# to the maximum of the basis order of the solution subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
defaults.quadrature_order = 2

[pylithapp.problem.solution.subfields]
displacement.basis_order = 2
lagrange_multiplier_fault.basis_order = 2


[pylithapp.problem]
# We add output at our fake GNSS stations that we will use a fake observations.
solution_observers = [domain, top_boundary, bot_boundary, gnss_stations]
solution_observers.gnss_stations = pylith.meshio.OutputSolnPoints

[pylithapp.problem.solution_observers.gnss_stations]
# The label is combined with the simulation name to provide a default name for output files.
label = gnss_stations
reader.filename = gnss_stations.txt
reader.coordsys.space_dim = 2


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem.materials.elastic_xneg]
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1

[pylithapp.problem.materials.elastic_xpos]
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1


# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
# Refine output by a factor of 2**3=8 to capture higher order discretization.
[pylithapp.problem.interfaces.fault]
observers.observer.refine_levels = 3

# Specify slip on the fault using a `SimpleDB` spatial database.
[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.SimpleGridDB
db_auxiliary_field.description = Fault rupture auxiliary field spatial database
db_auxiliary_field.filename = slip_variable.spatialdb
db_auxiliary_field.query_type = linear


# End of file
