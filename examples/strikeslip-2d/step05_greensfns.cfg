[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x
#
#
#             -----------
#             |    |    |
# Ux, Uy= 0   |    |    | Ux, Uy= 0
#             |    |    |
#             |    |    |
#             -----------
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux = Uy = 0
# boundary_xpos: Ux = Uy = 0
#
# Compute static Green's functions for slip impulses from -25 km <= y <= +25 km.
base = [pylithapp.cfg]
description = "Static Green's functions for fault slip"
authors = [Brad Aagaard]
keywords = ["Green's functions"]
arguments = [step05_greensfns.cfg]
version = 1.0.0
pylith_version = [>=4.0, <6.0]

features = [
    "Green's functions",
    Fault slip impulses
    ]


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
defaults.name = step05_greensfns

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on journal information for Green's function problem.
[pylithapp.journal.info]
greensfns = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
refiner = pylith.topology.RefineUniform
refiner.levels = 1

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp]
# Change the problem type to GreensFns.
problem = pylith.problems.GreensFns

[pylithapp.greensfns]
# Specify the fault on which to impose slip impulses.
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
label = fault
label_value = 20

[pylithapp.problem]
# We add output at our fake GNSS stations that we will use to invert for the slip.
solution_observers = [domain, top_boundary, bot_boundary, gnss_stations]
solution_observers.gnss_stations = pylith.meshio.OutputSolnPoints

[pylithapp.problem.solution_observers.gnss_stations]
# The label is combined with the simulation name to provide a default name for output files.
label = gnss_stations
reader.filename = gnss_stations.txt
reader.coordsys.space_dim = 2

# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
[pylithapp.problem.interfaces]
# To create slip impulses for Green's functions we use a special fault type.
fault = pylith.faults.FaultCohesiveImpulses

[pylithapp.problem.interfaces.fault]
# Limit Green's functions to left-lateral slip (dof=1)
impulse_dof = [1]

# Output `slip` on the fault.
observers.observer.data_fields = [slip, traction_change]

# We use a spatial database to specify the region of the fault where we want
# slip impulses for Green's functions.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = slip_impulses.spatialdb

# Currently, only basis order = 1 results in appropriate output for inversion.
auxiliary_subfields.slip.basis_order = 1


# End of file
