[pylithapp.metadata]
# This simulation matches Step 2 but we introduce initial conditions.
# The initial conditions match the solution, so we expect the solve to converge without any iterations.
#
#  y
#  ^
#  |
#   --> x
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg: Uy = a*x
# boundary_yneg: Ux = a*y
# boundary_xpos: Uy = a*x
# boundary_ypos: Ux = a*y
# boundary_zneg: Uz=0
#
# Initial conditions
#
# Ux = a*y
# Uy = a*x
# Uz = 0
base = [pylithapp.cfg]
description = Simple shear using Dirichlet boundary conditions and initial conditions that match the solution.
authors = [Brad Aagaard]
keywords = [simpe shear, initial conditions]
arguments = [step04_sheardispic.cfg]
version = 1.0.0
pylith_version = [>=3.0, <6.0]

features = [
    Static simulation,
    LU preconditioner,
    pylith.problems.InitialConditionDomain,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    spatialdata.spatialdb.SimpleGridDB,
    spatialdata.spatialdb.ZeroDB
    ]


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
defaults.name = step04_sheardispic


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# The Dirichlet boundary conditions match those in Step 2.
[pylithapp.problem]
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent
bc.bc_ypos = pylith.bc.DirichletTimeDependent
bc.bc_zneg = pylith.bc.DirichletTimeDependent

[pylithapp.problem.bc.bc_xneg]
label = boundary_xneg
label_value = 10
constrained_dof = [1]

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC -x edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_yneg]
label = boundary_yneg
label_value = 12
constrained_dof = [0]

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC -y edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_yneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_xpos]
label = boundary_xpos
label_value = 11
constrained_dof = [1]

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC +x edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_xpos.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_ypos]
label = boundary_ypos
label_value = 13
constrained_dof = [0]

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC +y edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_ypos.spatialdb
db_auxiliary_field.query_type = linear


[pylithapp.problem.bc.bc_zneg]
label = boundary_zneg
label_value = 14
constrained_dof = [2]

db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -z boundary


# ----------------------------------------------------------------------
# initial conditions
# ----------------------------------------------------------------------
# We apply initial conditions over the entire domain.
# We use a `SimpleGridDB` with a grid over the domain for faster queries
# comapred to a `SimpleDB`. 
[pylithapp.problem]
ic = [domain]
ic.domain = pylith.problems.InitialConditionDomain

[pylithapp.problem.ic.domain]
db = spatialdata.spatialdb.SimpleGridDB
db.description = Initial conditions over domain
db.filename = sheardisp_ic.spatialdb
db.query_type = linear

# End of file
